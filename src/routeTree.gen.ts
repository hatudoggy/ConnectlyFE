/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as AppTestIndexImport } from './routes/_app/test/index'
import { Route as AppSettingsIndexImport } from './routes/_app/settings/index'
import { Route as AppFeedIndexImport } from './routes/_app/feed/index'
import { Route as AppProfileProfileImport } from './routes/_app/profile/_profile'
import { Route as AppPostPostIdImport } from './routes/_app/post/$postId'
import { Route as AppProfileProfileUserIdIndexImport } from './routes/_app/profile/_profile.$userId.index'
import { Route as AppProfileProfileUserIdCommentsImport } from './routes/_app/profile/_profile.$userId.comments'

// Create Virtual Routes

const AppProfileImport = createFileRoute('/_app/profile')()

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppProfileRoute = AppProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRoute,
} as any)

const AppTestIndexRoute = AppTestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => AppRoute,
} as any)

const AppSettingsIndexRoute = AppSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRoute,
} as any)

const AppFeedIndexRoute = AppFeedIndexImport.update({
  id: '/feed/',
  path: '/feed/',
  getParentRoute: () => AppRoute,
} as any)

const AppProfileProfileRoute = AppProfileProfileImport.update({
  id: '/_profile',
  getParentRoute: () => AppProfileRoute,
} as any)

const AppPostPostIdRoute = AppPostPostIdImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => AppRoute,
} as any)

const AppProfileProfileUserIdIndexRoute =
  AppProfileProfileUserIdIndexImport.update({
    id: '/$userId/',
    path: '/$userId/',
    getParentRoute: () => AppProfileProfileRoute,
  } as any)

const AppProfileProfileUserIdCommentsRoute =
  AppProfileProfileUserIdCommentsImport.update({
    id: '/$userId/comments',
    path: '/$userId/comments',
    getParentRoute: () => AppProfileProfileRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_app/post/$postId': {
      id: '/_app/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof AppPostPostIdImport
      parentRoute: typeof AppImport
    }
    '/_app/profile': {
      id: '/_app/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileImport
      parentRoute: typeof AppImport
    }
    '/_app/profile/_profile': {
      id: '/_app/profile/_profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileProfileImport
      parentRoute: typeof AppProfileRoute
    }
    '/_app/feed/': {
      id: '/_app/feed/'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof AppFeedIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/settings/': {
      id: '/_app/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/test/': {
      id: '/_app/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof AppTestIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/profile/_profile/$userId/comments': {
      id: '/_app/profile/_profile/$userId/comments'
      path: '/$userId/comments'
      fullPath: '/profile/$userId/comments'
      preLoaderRoute: typeof AppProfileProfileUserIdCommentsImport
      parentRoute: typeof AppProfileProfileImport
    }
    '/_app/profile/_profile/$userId/': {
      id: '/_app/profile/_profile/$userId/'
      path: '/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof AppProfileProfileUserIdIndexImport
      parentRoute: typeof AppProfileProfileImport
    }
  }
}

// Create and export the route tree

interface AppProfileProfileRouteChildren {
  AppProfileProfileUserIdCommentsRoute: typeof AppProfileProfileUserIdCommentsRoute
  AppProfileProfileUserIdIndexRoute: typeof AppProfileProfileUserIdIndexRoute
}

const AppProfileProfileRouteChildren: AppProfileProfileRouteChildren = {
  AppProfileProfileUserIdCommentsRoute: AppProfileProfileUserIdCommentsRoute,
  AppProfileProfileUserIdIndexRoute: AppProfileProfileUserIdIndexRoute,
}

const AppProfileProfileRouteWithChildren =
  AppProfileProfileRoute._addFileChildren(AppProfileProfileRouteChildren)

interface AppProfileRouteChildren {
  AppProfileProfileRoute: typeof AppProfileProfileRouteWithChildren
}

const AppProfileRouteChildren: AppProfileRouteChildren = {
  AppProfileProfileRoute: AppProfileProfileRouteWithChildren,
}

const AppProfileRouteWithChildren = AppProfileRoute._addFileChildren(
  AppProfileRouteChildren,
)

interface AppRouteChildren {
  AppPostPostIdRoute: typeof AppPostPostIdRoute
  AppProfileRoute: typeof AppProfileRouteWithChildren
  AppFeedIndexRoute: typeof AppFeedIndexRoute
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute
  AppTestIndexRoute: typeof AppTestIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppPostPostIdRoute: AppPostPostIdRoute,
  AppProfileRoute: AppProfileRouteWithChildren,
  AppFeedIndexRoute: AppFeedIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
  AppTestIndexRoute: AppTestIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/post/$postId': typeof AppPostPostIdRoute
  '/profile': typeof AppProfileProfileRouteWithChildren
  '/feed': typeof AppFeedIndexRoute
  '/settings': typeof AppSettingsIndexRoute
  '/test': typeof AppTestIndexRoute
  '/profile/$userId/comments': typeof AppProfileProfileUserIdCommentsRoute
  '/profile/$userId': typeof AppProfileProfileUserIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/post/$postId': typeof AppPostPostIdRoute
  '/profile': typeof AppProfileProfileRouteWithChildren
  '/feed': typeof AppFeedIndexRoute
  '/settings': typeof AppSettingsIndexRoute
  '/test': typeof AppTestIndexRoute
  '/profile/$userId/comments': typeof AppProfileProfileUserIdCommentsRoute
  '/profile/$userId': typeof AppProfileProfileUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_app/post/$postId': typeof AppPostPostIdRoute
  '/_app/profile': typeof AppProfileRouteWithChildren
  '/_app/profile/_profile': typeof AppProfileProfileRouteWithChildren
  '/_app/feed/': typeof AppFeedIndexRoute
  '/_app/settings/': typeof AppSettingsIndexRoute
  '/_app/test/': typeof AppTestIndexRoute
  '/_app/profile/_profile/$userId/comments': typeof AppProfileProfileUserIdCommentsRoute
  '/_app/profile/_profile/$userId/': typeof AppProfileProfileUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/post/$postId'
    | '/profile'
    | '/feed'
    | '/settings'
    | '/test'
    | '/profile/$userId/comments'
    | '/profile/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/post/$postId'
    | '/profile'
    | '/feed'
    | '/settings'
    | '/test'
    | '/profile/$userId/comments'
    | '/profile/$userId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/login'
    | '/register'
    | '/_app/post/$postId'
    | '/_app/profile'
    | '/_app/profile/_profile'
    | '/_app/feed/'
    | '/_app/settings/'
    | '/_app/test/'
    | '/_app/profile/_profile/$userId/comments'
    | '/_app/profile/_profile/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/post/$postId",
        "/_app/profile",
        "/_app/feed/",
        "/_app/settings/",
        "/_app/test/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_app/post/$postId": {
      "filePath": "_app/post/$postId.tsx",
      "parent": "/_app"
    },
    "/_app/profile": {
      "filePath": "_app/profile",
      "parent": "/_app",
      "children": [
        "/_app/profile/_profile"
      ]
    },
    "/_app/profile/_profile": {
      "filePath": "_app/profile/_profile.tsx",
      "parent": "/_app/profile",
      "children": [
        "/_app/profile/_profile/$userId/comments",
        "/_app/profile/_profile/$userId/"
      ]
    },
    "/_app/feed/": {
      "filePath": "_app/feed/index.tsx",
      "parent": "/_app"
    },
    "/_app/settings/": {
      "filePath": "_app/settings/index.tsx",
      "parent": "/_app"
    },
    "/_app/test/": {
      "filePath": "_app/test/index.tsx",
      "parent": "/_app"
    },
    "/_app/profile/_profile/$userId/comments": {
      "filePath": "_app/profile/_profile.$userId.comments.tsx",
      "parent": "/_app/profile/_profile"
    },
    "/_app/profile/_profile/$userId/": {
      "filePath": "_app/profile/_profile.$userId.index.tsx",
      "parent": "/_app/profile/_profile"
    }
  }
}
ROUTE_MANIFEST_END */
